#lang rosette/safe

(require rosette/lib/angelic)

; successors can be interpreted with a state as input

(define (make-symbolic-successors alphabet successors)
  (map (lambda (symbol) (apply choose* successors)) alphabet))

(define (interpret successors state)
  (append-map (lambda (symbol) (list-ref successors symbol)) state))

(define (solve-states initial-state successors final-state)
  (solve (assert (equal? (interpret successors initial-state) final-state))))

; test

(define alphabet (list 0 1))

(define initial-state (list 0 1))

(define final-state (list 0 1 1 0))

(define valid-successors (list (list 0)
                               (list 0 1)
                               (list 0 1 1)
                               (list 0 1 1 0)
                               (list 1)
                               (list 1 1)
                               (list 1 1 0)
                               (list 1 0)))

(define symbolic-successors (make-symbolic-successors alphabet valid-successors))

(define actual-successors (evaluate symbolic-successors (solve-states initial-state symbolic-successors final-state)))