#lang racket

(require "l-interpreter.rkt")

; production-rule-set finder
(define (find-production-rule-set system-states)
  (define system-alphabet (remove-duplicates (last system-states))) ; get system alphabet from last state
  (define alphabet (range (length system-alphabet))) ; get alphabet from system alphabet (encode system alphabet as integers representing indices in system alphabet)
  (define states (map (lambda (state)
                        (map (lambda (symbol)
                               (index-of system-alphabet symbol))
                             state))
                      system-states)) ; get encoded states from system states by using said alphabet encoding
  (define valid-successors (combinations (last states))) ; get valid successors from all possible subsets of last state
  (define production-rule-set (solve-states alphabet states valid-successors)) ; solve for valid production rule set
  (define system-production-rule-set (build-list (vector-length production-rule-set) (lambda (position) (cons (list-ref system-alphabet position) (map (lambda (symbol) (list-ref system-alphabet symbol)) (vector-ref production-rule-set position)))))) ; transform production rule set to use system alphabet
  system-production-rule-set)

; production-rule-set printer
(define (print-production-rule-set production-rule-set)
  (for ([production-rule production-rule-set])
    (display (car production-rule))
    (display " -> ")
    (display (cdr production-rule))
    (newline)))

; test
(define state-1 (list "a" "b" "c"))
(define state-2 (list "a" "b" "a" "c" "a"))
(define state-3 (list "a" "b" "a" "a" "b" "c" "a" "a" "b"))

(define production-rule-set (find-production-rule-set (list state-1 state-2 state-3)))

(print-production-rule-set production-rule-set)
